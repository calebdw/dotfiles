#!/usr/bin/env bash

set -e

usage() {
    echo "Usage: $0 [--upstream=<upstream-url>] <repo-url> [<directory-name>]"
    exit 1
}

upstream=""
while [[ "$1" =~ ^-- ]]; do
    case "$1" in
        --upstream=*)
            upstream="${1#*=}"
            shift
            ;;
        *)
            usage
            ;;
    esac
done

if [ -z "$1" ]; then
    usage
fi

url=$1
basename=${url##*/}
name=${2:-${basename%.*}}

echo "Creating directory $name..."
mkdir -p "$name"
cd "$name"

git clone --bare "$url" .git
# git clone --bare "$url" .bare
# echo "gitdir: ./.bare" > .git

echo "Configuring origin remote..."
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
git config core.logallrefupdates true
git fetch origin

if [ -n "$upstream" ]; then
    echo "Adding upstream remote..."
    git remote add upstream "$upstream"
    git fetch upstream
fi

# Need to remove all local branches with invalid upstreams
# See: https://stackoverflow.com/questions/54367011/git-bare-repositories-worktrees-and-tracking-branches
git for-each-ref --format='%(refname:short)' refs/heads | xargs git branch -D

echo "Discovering default branch..."
remote=$(if [ -n "$upstream" ]; then echo "upstream"; else echo "origin"; fi)
default_branch=$(git remote show $remote | sed -n '/HEAD branch/s/.*: //p')

if [ -n "$default_branch" ]; then
    echo "Creating initial worktree for the default branch ($remote/$default_branch)..."
    git worktree add -B "$default_branch" "$default_branch" "${remote}/$default_branch"
fi
